1. 정수 1글자씩 입력 받을때

ex) 2178.c

for(i=0;i<N;i++)
{
	for(j=0;j<M;j++)
		scanf("%1d", &map[i][j]);
}





2. stirng 입력받고 출력할때

ex)

char s1[10];

scanf("%s", s1);

printf("%s\n", s1);





3. 0으로 세팅할때

int array[1001];

memset(array, 0, sizeof(array));







4. 2차원 배열 memset

for(int i=0;i<rows;i++) {
	memset(arr[i],0,sizeof(int)*colums);
}








6. 대소문자 모두 대문자로 바꾸기, 대소문자를 숫자로 바꾸기

// 223 : 1101 1111
// A : 0100 0001
// a : 0110 0001
// 223과 알파벳을 &시키면
// 소문자는 대문자로 바뀌고
// 대문자는 그대로 출력된다.

// 32로 &시키면 a, A = 1, b, B = 2로 대응된다.








7. %s는 띄어쓰기와 /n로 구분된다.







8. 띄어쓰기 포함하여 string 받기

char str[100];
gets(str);








9. for문은 (j=2*i;j<100;j+=i)등 다양하게 사용 가능








10. if(!a) a=0일때 작동








11. 입력 5 4 4 가 차례로 들어왔을 때
세 수를 xor시키면 5가 나온다.
xor을 사용하면 짝수번 들어온 것을 무시할 수 있다.










13. 2^n 을 표현할때 (1<<n)으로 사용 가능











14. 어떤 숫자에 666이 들어가있는지 보기
n을 10으로 나누면서 1000으로 나누었을 때 나머지가 666인지 확인해본다.










15. 첫째자리에서 반올림하기
int aver = (float)sum/(float)N + 0.5f;








16. %d로 하나씩 출력하는것보다 char로 바꿔서 %s로 출력하는게 더 빠르다.








17. int 나 long long 비트맵 만들어서 쓰기








18. long long ch = (1 << N/2)
위와 같이 쓰면 int가 할당되기 때문에 원하는 값이 들어가지 않을 수 있다.
long long ch = ((long long) << N/2)로 쓰면 된다.










19. 말록(stdlib.h)
int *arr_2;
arr = (int *) malloc(sizeof(int)*(원하는 배열의 수));
free(arr);






20. 함수를 선언하고 아랫줄에 함수를 사용해야한다.
만약 함수를 선언하고 위에서 그 함수를 쓴다면 맨위에
함수 반환형과 파라미터들을 써준다.








21. exit(0) 프로그램 종료











22. a = b = 1;
a, b 두 변수에 1할당












23. 경계조건과 초기조건 잘 생각해주기














24. memset의 의미는 "1byte 단위로 해당 메로리 값을 초기화 시킨다" 이다.
memset을 사용할 때 arr에 int가 들어가 있다면 
0, -1로 쉽게 초기화가 가능하지만 1은 안된다.
char형이면 1로 초기화가 가능하다.
memset은 char기준으로 초기화 시키기 때문

memset(arr,0,sizeof(arr));
memset(arr,-1,sizeof(arr));

int arr[100] = 1;
int arr[100] = {1};
int arr[100] = {1,};
첫 번째 요소만 1로 초기화되고 그 이후는 전부 0이된다.
이중어레이도 가능하다.
int arr[100][100] = {0};















25.
#define SQR(X) X*X
#define PRT(X) printf("계산 결과는 %d입니다.\n", X)
















26. 삼항 연산자 return
a<b?return a:return b;   (x)
return a<b?a:b;          (0)












27. time함수














28. 2차원 배열 dfs사용시
do while로 작성 (한칸 뒤에서 시작)

ex)15684
do{
     x = (y == H) ? x+1 : x;
     y = y%H + 1;
     if(x > N)   return;
} while(lad[x][y] || lad[x-1][y] || lad[x+1][y]);












29. 동적할당
int *a;
a = (int *)malloc(sizeof(int) * 100);
free(a);









30. struct

struct 구조체이름 {
    자료형 멤버이름;
} 변수;
(변수는 선택)

ex)
struct Person {
	char name[20];
	int age;
	char address[100];
} p1;

- p1은 전역 변수가 된다.











31. 구조체 변수를 선언하는 동시에 초기화하기
struct 구조체이름 변수이름 = { .멤버이름1 = 값1, .멤버이름2 = 값2 };
struct 구조체이름 변수이름 = { 값1, 값2 };


struct Person {
    char name[20];
    int age;
    char address[100];
};

int main()
{
    // name에는 "홍길동", age에는 30, address에는 "서울시 용산구 한남동"
    struct Person p1 = { .name = "홍길동", .age = 30, .address = "서울시 용산구 한남동" };

    printf("이름: %s\n", p1.name);       // 이름: 홍길동
    printf("나이: %d\n", p1.age);        // 나이: 30
    printf("주소: %s\n", p1.address);    // 주소: 서울시 용산구 한남동

    // name에는 "고길동", age에는 40, address에는 "서울시 서초구 반포동"
    struct Person p2 = { "고길동", 40, "서울시 서초구 반포동" };

    printf("이름: %s\n", p2.name);       // 이름: 고길동
    printf("나이: %d\n", p2.age);        // 나이: 40
    printf("주소: %s\n", p2.address);    // 주소: 서울시 서초구 반포동

    return 0;
}















32. sleep -> 코드를 지연시켜준다.

sleep(초): 리눅스

    unsigned int sleep (unsigned int __seconds);

usleep(마이크로초): 리눅스

    int usleep (__useconds_t __useconds);




















33. 화면 연속적으로 보이게 하기
printf("\x1b[H") -> 커서를 왼쪽 상단으로 이동
printf("\x1b[2J") -> 모든 화면 지우기

















34. 배열 사용하지 않고 바로 출력하기

int N;
scanf("%d", &N);
printf("%c\n", ".,-~:;=!*#$@"[N>0?N:0]);














35. 함수를 계속 사용하면 함수 안에 있는 array는 초기화 되지 않아 문제가 발생할 수 있다.
void fun(void)
{
	int a[100];
	a[100]사용
}
다시 fun에 들어올때에는 a[100]을 초기화 하고 써줘야 안전하다.



















36. random 사용법
#include <stdlib.h>
#include <time.h>

srand(time(NULL))을 사용하고

rand()를 사용하면 난수가 rand()에 생성된다.














37. left shift나 right shift를 쓸때
a << -1과 같이 음수를 쓰면 결과는 정해지지 않는다.



















38. struct 크기
sizeof(struct a)

















39. dynamic programming 할 때 초기값 dp에 설정해주기



















40. dp할때 순차적으로 확인하면 본걸 또 바꾸어서 다른값이 나올수있음
















41. %d로 받으면 뒤에 이상한 기호가 나오지 전까지 숫자를 받는다.
55+49-21
이때 scanf를 %d로 하나 받으면 55가 들어간다.


















42. scanf("%[^\n]s", str); 이면 \n이 오기기까지 받는다.
그 다음 scanf("%[^\n]s", str)로 받으면 \n을 인식해서
못받을 수 있다.















43. scanf("%*c%c",&variable); //1개의 문자를 무시한다.
scanf("%*d%d",&variable); //1개의 숫자를 무시한다.

scanf("%*2c%c",&variable); //처음 2개의 문자를 무시한다.
scanf("%*2d%d",&variable); //처음 2개의 숫자를 무시한다.

scanf("%*2s%s",pointer variable); //2개의 문자를 무시한 문자열.
= scanf("%*2c%s",pointer variable);
scanf("%2d",&variable); //처음 2개의 숫자만 입력받는다
scanf("%2s",pointer variable); //처음 2개의 문자만을 문자열로 받는다.

* []내의 문자를 포함한 문자열을 입력받는다

scanf("%[abc]",pointer variable); //abc외의 문자는 구분자로 인식한다..
= scanf("%[a-c]",pointer variable);

* []내의 문자를 구분자로 인식한다.

scanf("%[^abc]",pointer variable); //abc문자를 구분자로 인식한다.
= scanf("%[^a-c]",pointer variable);











44. strlen은 문자 하나씩 확인하여 시간이 오래걸릴 수 있다.





















45. a & 1로 a를 2로 나누었을 때 나머지를 구할 수 있다
a >> 1로 2로 나눈 몫을 구할 수 있다.





















46. 이중어레이 말록

int height = 6, width = 8;
int **arr;
arr = (int**) malloc ( sizeof(int*) * height );
for(int i=0; i<height; i++)
    arr[i] = (int*) malloc ( sizeof(int) * width );
    
    
















47. 말록을 사용할 때 주소안에 있는 값이 바뀌어도 되는 값인지 확인하고 바꾸기













48. error: a label can only be part of a statement and a declaration is not a statement
label안에 변수를 선언하면 오류가 발생한다.
(goto 문이나 case문)
중괄호를 쳐주면 해결된다.
 
 
 
 
 
 
 
 
 
 
49. memcpy
 
#include <stdio.h>
#include <memory.h>
 
#define ARR_SIZE 10
 
int main(void){
	int dstArr[ARR_SIZE];
	int srcArr[ARR_SIZE] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
	int i;
	memcpy(dstArr, srcArr, sizeof(srcArr)); // or memcpy(dstArr, srcArr, sizeof(int) * ARR_SIZE);
	return 0;
}
 
 
 
 
 
 
 
 
 
 
50. 포인터에 상수를 더하는 경우
 포인터 변수에 1을 더하면 주소를 1증가시키는 것이 아니라 다음 위치에 있는 데이터로 이동하는 것을
의미한다.




















51. 포인터와 포인터를 빼는 행위는 두 주소 사이에 대상이 몇 개 있는지를 계산한다.

 

 
 



? 52. Bsearch에서 최솟값이나 최댓값을 구할때 h를 포함시켜주면 편하다
Bsearch(s,h)
Bsearch(h,e)

 

  
 
 

 

 

53. qsort쓸 경우 long long을 정렬할 경우 sizeof(long long)으로 해주기

 

 

 



 
 
 
54. qsort 사용할 때
int cmp(const void* a,const void* b)
{
	return *(int*)a-*(int*)b;
}
가능
















55. 그래프를 이용한 BFS, DFS
map을 만들어 선을 표시한다.













56. 어레이에서 0번째 인덱스에 5개 1번째에 3개 2번째에서 2개 등 다른 갯수가 필요할때 malloc으로 동적
할당을 해준다.
0 0 0
1 1 1
2 2
3
4 

int *arr[2000];
arr[i] = (arr *)malloc(sizeof(arr) * 원하는 사이즈);















57. 여러 값을 리턴 받을때 

void calculate(int x, int y, int *add, int *sub) {
    *add = x + y;
    *sub = x - y; 
}

int add, sub;
calculate(x, y, &add, &sub);

- 구조체 이용

struct calc_t calculate (int x, int y) {
    struct calc_t tmp;
 
    tmp.add = x + y;
    tmp.sub = x - y;

    return tmp;
}

struct calc_t {
    int add;
    int sub;
};

struct calc_t value;
int x = 7, y = 5;
value = calculate(x, y);



















58. dfs사용시

dfs()
{
	값 바꾸기
	dfs(n+1)
	값 원래대로 되돌리기
}









59. int값 넘어가는지 잘 확인하기

















60. 맵에서 순차적으로 뒤에서 지울때, 큐로 사용해서 지워야한다.(3190)









61. 행열 잘 구분하기






62. 2차원 배열을 손수 채울때, 원소가 4개가 들어가야하는데
3개만 들어가도 컴파일됨 <-조심
int t_x[6][4][4] = {
                             {{0,1,2,3},
                             {0,0,0,0},
                             {0,0,0,0},
                             {0,0,0,0}},
 
                             {{0,1,0,1},
                             {0,0,0,0},
                             {0,0,0,0},
                             {0,0,0,0}},
 
                             {{0,0,0,1},
                             {0,1,2,2},
                             {0,0,0,-1},
                             {0,-1,-2-2}}, <- 요런식으로











63. 구조체도 ={0, }으로 초기화 가능하다.
